=begin
#OpenAI API

#The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

The version of the OpenAPI document: 2.3.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'cgi'

module OpenAi
  class UploadsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Adds a [Part](/docs/api-reference/uploads/part-object) to an [Upload](/docs/api-reference/uploads/object) object. A Part represents a chunk of bytes from the file you are trying to upload.   Each Part can be at most 64 MB, and you can add Parts until you hit the Upload maximum of 8 GB.  It is possible to add multiple Parts in parallel. You can decide the intended order of the Parts when you [complete the Upload](/docs/api-reference/uploads/complete). 
    # @param upload_id [String] The ID of the Upload. 
    # @param data [File] The chunk of bytes for this Part. 
    # @param [Hash] opts the optional parameters
    # @return [UploadPart]
    def add_upload_part(upload_id, data, opts = {})
      data, _status_code, _headers = add_upload_part_with_http_info(upload_id, data, opts)
      data
    end

    # Adds a [Part](/docs/api-reference/uploads/part-object) to an [Upload](/docs/api-reference/uploads/object) object. A Part represents a chunk of bytes from the file you are trying to upload.   Each Part can be at most 64 MB, and you can add Parts until you hit the Upload maximum of 8 GB.  It is possible to add multiple Parts in parallel. You can decide the intended order of the Parts when you [complete the Upload](/docs/api-reference/uploads/complete). 
    # @param upload_id [String] The ID of the Upload. 
    # @param data [File] The chunk of bytes for this Part. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UploadPart, Integer, Hash)>] UploadPart data, response status code and response headers
    def add_upload_part_with_http_info(upload_id, data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UploadsApi.add_upload_part ...'
      end
      # verify the required parameter 'upload_id' is set
      if @api_client.config.client_side_validation && upload_id.nil?
        fail ArgumentError, "Missing the required parameter 'upload_id' when calling UploadsApi.add_upload_part"
      end
      # verify the required parameter 'data' is set
      if @api_client.config.client_side_validation && data.nil?
        fail ArgumentError, "Missing the required parameter 'data' when calling UploadsApi.add_upload_part"
      end
      # resource path
      local_var_path = '/uploads/{upload_id}/parts'.sub('{' + 'upload_id' + '}', CGI.escape(upload_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['data'] = data

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UploadPart'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"UploadsApi.add_upload_part",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UploadsApi#add_upload_part\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cancels the Upload. No Parts may be added after an Upload is cancelled. 
    # @param upload_id [String] The ID of the Upload. 
    # @param [Hash] opts the optional parameters
    # @return [Upload]
    def cancel_upload(upload_id, opts = {})
      data, _status_code, _headers = cancel_upload_with_http_info(upload_id, opts)
      data
    end

    # Cancels the Upload. No Parts may be added after an Upload is cancelled. 
    # @param upload_id [String] The ID of the Upload. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Upload, Integer, Hash)>] Upload data, response status code and response headers
    def cancel_upload_with_http_info(upload_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UploadsApi.cancel_upload ...'
      end
      # verify the required parameter 'upload_id' is set
      if @api_client.config.client_side_validation && upload_id.nil?
        fail ArgumentError, "Missing the required parameter 'upload_id' when calling UploadsApi.cancel_upload"
      end
      # resource path
      local_var_path = '/uploads/{upload_id}/cancel'.sub('{' + 'upload_id' + '}', CGI.escape(upload_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Upload'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"UploadsApi.cancel_upload",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UploadsApi#cancel_upload\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Completes the [Upload](/docs/api-reference/uploads/object).   Within the returned Upload object, there is a nested [File](/docs/api-reference/files/object) object that is ready to use in the rest of the platform.  You can specify the order of the Parts by passing in an ordered list of the Part IDs.  The number of bytes uploaded upon completion must match the number of bytes initially specified when creating the Upload object. No Parts may be added after an Upload is completed. 
    # @param upload_id [String] The ID of the Upload. 
    # @param complete_upload_request [CompleteUploadRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Upload]
    def complete_upload(upload_id, complete_upload_request, opts = {})
      data, _status_code, _headers = complete_upload_with_http_info(upload_id, complete_upload_request, opts)
      data
    end

    # Completes the [Upload](/docs/api-reference/uploads/object).   Within the returned Upload object, there is a nested [File](/docs/api-reference/files/object) object that is ready to use in the rest of the platform.  You can specify the order of the Parts by passing in an ordered list of the Part IDs.  The number of bytes uploaded upon completion must match the number of bytes initially specified when creating the Upload object. No Parts may be added after an Upload is completed. 
    # @param upload_id [String] The ID of the Upload. 
    # @param complete_upload_request [CompleteUploadRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Upload, Integer, Hash)>] Upload data, response status code and response headers
    def complete_upload_with_http_info(upload_id, complete_upload_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UploadsApi.complete_upload ...'
      end
      # verify the required parameter 'upload_id' is set
      if @api_client.config.client_side_validation && upload_id.nil?
        fail ArgumentError, "Missing the required parameter 'upload_id' when calling UploadsApi.complete_upload"
      end
      # verify the required parameter 'complete_upload_request' is set
      if @api_client.config.client_side_validation && complete_upload_request.nil?
        fail ArgumentError, "Missing the required parameter 'complete_upload_request' when calling UploadsApi.complete_upload"
      end
      # resource path
      local_var_path = '/uploads/{upload_id}/complete'.sub('{' + 'upload_id' + '}', CGI.escape(upload_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(complete_upload_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Upload'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"UploadsApi.complete_upload",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UploadsApi#complete_upload\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates an intermediate [Upload](/docs/api-reference/uploads/object) object that you can add [Parts](/docs/api-reference/uploads/part-object) to. Currently, an Upload can accept at most 8 GB in total and expires after an hour after you create it.  Once you complete the Upload, we will create a [File](/docs/api-reference/files/object) object that contains all the parts you uploaded. This File is usable in the rest of our platform as a regular File object.  For certain `purpose`s, the correct `mime_type` must be specified. Please refer to documentation for the supported MIME types for your use case: - [Assistants](/docs/assistants/tools/file-search#supported-files)  For guidance on the proper filename extensions for each purpose, please follow the documentation on [creating a File](/docs/api-reference/files/create). 
    # @param create_upload_request [CreateUploadRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Upload]
    def create_upload(create_upload_request, opts = {})
      data, _status_code, _headers = create_upload_with_http_info(create_upload_request, opts)
      data
    end

    # Creates an intermediate [Upload](/docs/api-reference/uploads/object) object that you can add [Parts](/docs/api-reference/uploads/part-object) to. Currently, an Upload can accept at most 8 GB in total and expires after an hour after you create it.  Once you complete the Upload, we will create a [File](/docs/api-reference/files/object) object that contains all the parts you uploaded. This File is usable in the rest of our platform as a regular File object.  For certain &#x60;purpose&#x60;s, the correct &#x60;mime_type&#x60; must be specified. Please refer to documentation for the supported MIME types for your use case: - [Assistants](/docs/assistants/tools/file-search#supported-files)  For guidance on the proper filename extensions for each purpose, please follow the documentation on [creating a File](/docs/api-reference/files/create). 
    # @param create_upload_request [CreateUploadRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Upload, Integer, Hash)>] Upload data, response status code and response headers
    def create_upload_with_http_info(create_upload_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UploadsApi.create_upload ...'
      end
      # verify the required parameter 'create_upload_request' is set
      if @api_client.config.client_side_validation && create_upload_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_upload_request' when calling UploadsApi.create_upload"
      end
      # resource path
      local_var_path = '/uploads'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_upload_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Upload'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"UploadsApi.create_upload",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UploadsApi#create_upload\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
